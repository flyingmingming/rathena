front_lines,126,140,6	script	Misc Services	4_f_jpn2,{
function Job_Menu; function Get_Job_Equip;



    mes "[Jira]";
    mes "What do you wanna do?";
    set .@MiscMenu$,"^0000FF ~ Reset Stats/Skill^000000:^0000FF ~ Job Change^000000: "
                    + "^0000FF~ Rental^000000: ^0000FF~ Platinum Skills^000000: "
                    + "^0000FF~ Plagiarize Skill^000000:^0000FF ~ Stylist^000000:Cancel";
    
    switch(select(.@MiscMenu$))
    {
        case 1:
            callsub S_Reset;
        end;

        case 2:
			next;
            callsub S_JobChange;
        end;

        case 3:
            callsub S_Rental;
        end;

        case 4:
            callfunc "F_GetPlatinumSkills";
            next;
            mes "Here you go!";
            specialeffect2 EF_TEIHIT3;            
        end;

        case 5:
            callsub S_PlagiarizeSkill;
            specialeffect2 EF_TEIHIT3;            
        end;

        case 6:
            callsub S_Stylist;
        end;

        case 7:
        end;
    }

// Checks if the Player has the required level.
// closes if not, returns if yes
function	Require_Level	{
	if (BaseLevel < getarg(0) || JobLevel < getarg(1)) {
		.@blvl = getarg(0) - BaseLevel;
		.@jlvl = getarg(1) - JobLevel;
		mes "Level requirement:";
		mes ((getarg(0)>1)? 
			"^bb0000"+getarg(0)+"^000000 (^bb0000Base^000000) / ":"")+"^00bb00"+
			getarg(1)+"^000000 (^00bb00Job^000000)";
		mes "You need " +
			((.@blvl > 0) ? "^bb0000"+.@blvl+"^000000 more base levels " + 
				((.@jlvl > 0) ? "and " : "") : "") +
			((.@jlvl > 0) ? "^00bb00"+.@jlvl+"^000000 more job levels " : "") +
			"to continue.";
		close;
	}
	return;
}


// Checks if the given eac is a baby class
function Is_Baby	{
	return ((getarg(0, eaclass())&EAJL_BABY)>0);
}


// Checks if the player can change to third class.
// Note: This does not include the level checks.
function	Can_Change_Third	{
	// To change to third class you either need to be:
	// * Second Class
	// * Transcendent Second Class
	// * Baby Second Class
	if( !.ThirdClass )
		return false; // Third job change disabled
	if( !(eaclass()&EAJL_2) )
		return false; // Not second Class
	if( eaclass()&EAJL_THIRD )
		return false; // Already Third Class
	if( roclass(eaclass()|EAJL_THIRD) < 0 )
		return false; // Job has no third Class
	if( (eaclass()&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE )
		return false; // Exp. Super Novice equals 3rd Cls, but has it's own case
	if( Is_Baby() && (!.BabyClass || !.BabyThird) )
		return false; // No Baby (Third) change allowed
	return true;
}

function	Can_Rebirth	{
	// To rebirth, you need to be:
	// * Second Class
	if( !.RebirthClass )
		return false; // Rebirth disabled
	if( !(eaclass()&EAJL_2) )
		return false; // Not second Class
	if( eaclass()&(EAJL_UPPER|EAJL_THIRD) )
		return false; // Already Rebirthed/ Third Class
	if( roclass(eaclass()|EAJL_UPPER) < 0 )
		return false; // Job has no transcended class
	if( Is_Baby() && !.BabyClass )
		return false; // No Baby changes allowed
	return true;
}

// Checks if the given eac is a first class
function	Is_First_Cls	{
	return (getarg(0) <= EAJ_TAEKWON);
}

function	Check_Riding	{
	// Note: Why we should always check for Riding:
	// Mounts are considered as another class, which
	// would make this NPC bigger just to handle with
	// those special cases.
	if (checkfalcon() || checkcart() || checkriding() || ismounting()) {
		mes "Please remove your " +
			((checkfalcon()) ? "falcon" : "") +
			((checkcart()) ? "cart" : "") +
			((checkriding()) ? "Peco" : "") +
			((ismounting()) ? "mount" : "") +
			" before proceeding.";
		close;
	}
	return;
}
function	Check_SkillPoints	{
	if (.SkillPointCheck && SkillPoint) {
		mes "Please use all your skill points before proceeding.";
		close;
	}
	return;
}

// addJobOptions is essentially the same like
// setarray .@array[getarraysize(.@array)],opt1,opt2,...;
// It's just easier to read, since we're using it very often
function	Job_Options	{
	.@argcount = getargcount();
	.@arr_size = getarraysize(getarg(0));
	for( .@i = 1; .@i < .@argcount; .@i++) {
		setarray getelementofarray(getarg(0), .@arr_size++),getarg(.@i);
	}
}


// Displays the job menu
function	Job_Menu	{
	// getarg(0) is the .@job_opt array holding all available job changes.
	function Confirm_Change;
	while(true) {
		.@opt_cnt =  getarraysize(getarg(0));
		if( .@opt_cnt <= 0 ) {
			mes "No more jobs are available.";
			close;
		}

		.@selected = 0; // Just a single job class given, no select needed
		if (.@opt_cnt > 1) {
			// Multiple job classes given. Select one and save it to .@class
			// After that confirm .@class
			mes "Select a job.";
			.@menu$ = "";
			for (.@i = 0; .@i < .@opt_cnt; .@i++) {
				if( getelementofarray(getarg(0), .@i) == Job_Novice_High)
					.@jobname$ = "^0055FFRebirth^000000";
				else
					.@jobname$ = jobname(getelementofarray(getarg(0), .@i));
				.@menu$ = .@menu$ + " ~ " + .@jobname$ + ":";
			}
			.@menu$ = .@menu$+" ~ ^777777Cancel^000000";
			.@selected = select(.@menu$) - 1;
			if( .@selected < 0 || .@selected >= .@opt_cnt )
				close;
			next;
			mes .NPCName$;
		}
		.@class = getelementofarray(getarg(0), .@selected);
		if ((.@class == Job_Super_Novice || .@class == Job_Super_Baby) &&
				BaseLevel < .SNovice) {
			// Special Level Requirement because Super Novice and
			// Super Baby can both be selected in one of the first class
			// changes. That's why the Level Requirement is after and not before
			// the selection.
			mes "A base level of " + .SNovice +
				" is required to turn into a " + jobname(.@class) + ".";
			return;
		}
		// Confirm the Class
		Confirm_Change(.@class, .@opt_cnt > 1);
		next;
		mes .NPCName$;
	}
	return;
}


// Executes the actual jobchange and closes.
function	Job_Change	{
	.@previous_class = Class;
	.@to_cls = getarg(0);
	next;
	mes .NPCName$;
	mes "You are now " + callfunc("F_InsertArticle", jobname(.@to_cls)) + "!";
	if (.@to_cls == Job_Novice_High && .LastJob)
		lastJob = Class; // Saves the lastJob for rebirth
	jobchange .@to_cls;
	if (.@to_cls == Job_Novice_High)
		resetlvl(1);
	else if (.@to_cls == Job_Baby) {
		resetstatus;
		resetskill;
		set SkillPoint,0;
	}
	specialeffect2 EF_ANGEL2;
	specialeffect2 EF_ELECTRIC;
	if (.@previous_class != Class) {
		callfunc "F_GetPlatinumSkills";
		Get_Job_Equip();
	}
	close; // Always closes after the change
}

function	Confirm_Change	{
	// Player confirms he want to change into .@class
	.@class = getarg(0, -1);
	.@back = getarg(1, false);
	if( .@class < 0 || eaclass(.@class) == -1 ) {
		mes "Unknown Class Error.";
		close;
	}
	mes "Do you want to change into ^0055FF"+jobname(.@class)+"^000000 class?";
	.@job_option$ = " ~ Change into ^0055FF"+jobname(.@class)+"^000000 class";
	if( .@class == Job_Novice_High)
		.@job_option$ = " ~ ^0055FFRebirth^000000";
	
	if (select(.@job_option$+": ~ ^777777" + 
			((.@back) ?"Go back" : "Cancel") + "^000000") == 1) {
		Job_Change(.@class);
	}
	if (!.@back)
		close; // "Cancel" pressed
	return;
}

// Function which gives a job related item to the player
// the items are the rewards from the original job change quests
function	Get_Job_Equip	{
	switch(BaseClass) 
	{
		// First Class
		case Job_Swordman:
			rentitem2 36000,604800,1,8,0,0,0,0,0; //weap
        	rentitem 2766,604800; //figurine
			break;
		case Job_Mage:
			rentitem2 36001,604800,1,8,0,0,0,0,0;
        	rentitem 2768,604800;
			break;
		case Job_Archer:
			rentitem2 36002,604800,1,8,0,0,0,0,0;
			getitem 1751,rand(500,1500);
			rentitem 2769,604800;
			break;
		case Job_Acolyte:
			rentitem2 36003,604800,1,8,0,0,0,0,0;
			rentitem 2767,604800;
			break;
		case Job_Merchant:
			rentitem2 36004,604800,1,8,0,0,0,0,0;
        	rentitem 2771,604800;
			break;
		case Job_Thief:
			rentitem2 36005,604800,1,8,0,0,0,0,0;
			rentitem 2770,604800;
			break;
		case Job_Gunslinger:
			rentitem2 36006,604800,1,8,0,0,0,0,0;
			deletearray .@bulletAmmo[0],getarraysize(.@bulletAmmo);
			setarray .@bulletAmmo[0],13200,13201,13202;
			set .@randBullet,rand(0,2);
			getitem .@bulletAmmo[.@randBullet],rand(500,1500);
			break;
		case Job_Ninja:
			rentitem2 36007,604800,1,8,0,0,0,0,0;
			break;
	}
	return;
}

S_JobChange:
// Begin of the NPC
	mes .NPCName$;
	Check_Riding();
	Check_SkillPoints();

	// initialisation
	.@eac = eaclass();
	.@third_possible = Can_Change_Third();
	.@rebirth_possible = Can_Rebirth();
	.@first_eac = .@eac&EAJ_BASEMASK;
	.@second_eac = .@eac&EAJ_UPPERMASK;
	// Note: These are already set in pc.cpp
	// BaseClass = roclass(.@eac&EAJ_BASEMASK) which is the players First Class
	// BaseJob = roclass(.@eac&EAJ_UPPERMASK) which is the players Second Class
	//dispbottom "Debug: eac ("+.@eac+"), third ("+.@third_possible+"), rebirth("+.@rebirth_possible+"), BaseClass ("+BaseClass+"), BaseJob ("+BaseJob+")";
		
	// From here on the jobmaster checks the current class
	// and fills the array `.@job_opt` with possible
	// job options for the player.
	
	if( .@rebirth_possible ) {
		// Rebirth option (displayed on the top of the menu)
		Require_Level(.Req_Rebirth[0], .Req_Rebirth[1]);
		Job_Options(.@job_opt, Job_Novice_High);
	}
	if( .@third_possible ) {
		// Third Job change (displayed below rebirth)
		Require_Level(.Req_Third[0], .Req_Third[1]);
		Job_Options(.@job_opt, roclass(.@eac|EAJL_THIRD));
	}
	
	 
	if (.SecondExpanded && 
	   (.@eac&EAJ_UPPERMASK) == EAJ_SUPER_NOVICE && // is Super Novice
	   !(eaclass()&EAJL_THIRD) ) {				 	// not already Expanded SN
		// (Baby) Super Novice to Expanded (Baby) Super Novice
	   	if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded must be enabled if the is a baby
			Require_Level(.Req_Exp_SNOVI[0], .Req_Exp_SNOVI[1]);
			Job_Options(.@job_opt,roclass(.@eac|EAJL_THIRD)); // Expanded SN is "third" cls
		}
	}

	if (.SecondExpanded && 
		((.@eac&(~EAJL_BABY)) == EAJ_NINJA || 		// is (Baby) Ninja
		(.@eac&(~EAJL_BABY)) == EAJ_GUNSLINGER)) {	// is (Baby) Gunslinger
		// (Baby) Ninja to (Baby) Kagerou / Oboro
		// (Baby) Gunslinger to (Baby) Rebellion
		if( !Is_Baby(.@eac) || (.BabyClass && .BabyExpanded) ) {
			// .BabyClass & .BabyExpanded must be enabled if the is a baby
			Require_Level(.Req_Exp_NJ_GS[0], .Req_Exp_NJ_GS[1]);
			// Kagerou, Oboro, Rebellion are considered as a 2-1 class
			Job_Options(.@job_opt, roclass(.@eac|EAJL_2_1));
		}
	}
	
	// Player is Job_Novice, Job_Novice_High or Job_Baby
	if (.@first_eac == EAJ_NOVICE && .@second_eac != EAJ_SUPER_NOVICE) {
		// MAPID_NOVICE, MAPID_SUPER_NOVICE, MAPID_NOVICE_HIGH, MAPID_BABY
		Require_Level(.Req_First[0], .Req_First[1]);
		switch(Class) {
			case Job_Novice:
				// First job change
				Job_Options(.@job_opt,Job_Swordman,
					Job_Mage, Job_Archer, Job_Acolyte, Job_Merchant, Job_Thief,
					Job_Super_Novice, Job_Taekwon, Job_Gunslinger, Job_Ninja);
				if( .BabyNovice )
					Job_Options(.@job_opt, Job_Baby);
				break;
			case Job_Novice_High:
				// Job change after rebirth
				if( .LastJob && lastJob )
					Job_Options(.@job_opt,
						roclass((eaclass(lastJob)&EAJ_BASEMASK)|EAJL_UPPER));
				else
					Job_Options(.@job_opt, 
						Job_Swordman_High, Job_Mage_High, Job_Archer_High,
						Job_Acolyte_High, Job_Merchant_High, Job_Thief_High);
				break;
			case Job_Baby:
				if( !.BabyClass )
					break;
				// First job change as a baby
				Job_Options(.@job_opt, Job_Baby_Swordman, Job_Baby_Mage,
					Job_Baby_Archer,Job_Baby_Acolyte, Job_Baby_Merchant,
					Job_Baby_Thief);
				if( .BabyExpanded )
					Job_Options(.@job_opt, Job_Super_Baby, Job_Baby_Taekwon,
						Job_Baby_Gunslinger, Job_Baby_Ninja);
				if( .BabySummoner )
					Job_Options(.@job_opt, Job_Baby_Summoner);
				break;
			default:
				mes "An error has occurred.";
				close;
		}
	} else if( Is_First_Cls(.@eac) || 				// First Class
			   Is_First_Cls(.@eac&(~EAJL_UPPER)) ||	// Trans. First Cls
			   (.BabyClass && Is_First_Cls(.@eac&(~EAJL_BABY))) ) {	// Baby First Cls
		// Player is First Class (not Novice)
		// most jobs should have two options here  (2-1 and 2-2)
		.@class1 = roclass(.@eac|EAJL_2_1); // 2-1
		.@class2 = roclass(.@eac|EAJL_2_2); // 2-2
		// dispbottom "Debug: Classes: class1 ("+.@class1+"), class2 ("+.@class2+")";
		if(.LastJob && lastJob && (.@eac&EAJL_UPPER)) {
			// Player is rebirth Cls and linear class changes are enforced
			Require_Level(.Req_Second[0], .Req_Second[1]);
			Job_Options(.@job_opt, lastJob + Job_Novice_High);
		} else {
			// Class is not enforced, player can decide.
			if( .@class1 > 0 ) { // 2-1
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class1);
			}
			if( .@class2 > 0 ) { // 2-2
				Require_Level(.Req_Second[0], .Req_Second[1]);
				Job_Options(.@job_opt, .@class2);
			}
		}
	}
	
	// Displaying the Job Menu defined by .@job_opt.
	// .@job_opt should not be changed below this line.
	
	Job_Menu(.@job_opt);
	close;
end;

S_Rental:
	if (ismounting()) 
    {
		message strcharinfo(0),"You must first remove your mount.";
		end;
	} 
    else if (!checkcart() && getskilllv("MC_PUSHCART")) setcart;
	else if (!checkfalcon() && getskilllv("HT_FALCON")) setfalcon;
	else if (!checkriding() && getskilllv("KN_RIDING")) setriding;
	else 
    {
		message strcharinfo(0),"You do not meet requirements to rent.";
		end;
	}
    mes "Here you go!";
	specialeffect2 EF_TEIHIT3;
return;

S_Reset:
	//	 		Skills,	Stats,	Both,	Limit
	setarray .@Reset,	500000,	500000,	1000000,	0;
	mes "Reset Stats: "+ callfunc("F_InsertComma",.@Reset[1]) +"z";
	mes "Reset Skills: "+ callfunc("F_InsertComma",.@Reset[0]) +"z";
	mes "Reset Both: "+ callfunc("F_InsertComma",.@Reset[2]) +"z";
	mes "Please select the service you want:";
	next;
	set .@i,(select("^FF3355 ~ Reset Skills: ~ Reset Stats: ~ Reset Both^000000:Cancel"));
	if(.@i > 3) close;
	if (Zeny < .@Reset[.@i-1]) {
		mes "Sorry, you don't have enough Zeny.";
		close;
	}
	set Zeny, Zeny-.@Reset[.@i-1];
	if(.@i&1){
		sc_end_class;
		ResetSkill;
	}
	if(.@i&2) ResetStatus;
    mes "Here you go!";
    specialeffect2 EF_TEIHIT3;
	close;
return;

S_Stylist:
	setarray .@Styles[1],
		getbattleflag("max_cloth_color"),
		getbattleflag("max_hair_style"),
		getbattleflag("max_hair_color");
	setarray .@Look[1],
		LOOK_CLOTHES_COLOR,
		LOOK_HAIR,
		LOOK_HAIR_COLOR;
	set .@s, select(" ~ Cloth color: ~ Hairstyle: ~ Hair color");
	set .@Revert, getlook(.@Look[.@s]);
	set .@Style,1;
	while(1) {
		setlook .@Look[.@s], .@Style;
		message strcharinfo(0),"This is style #"+.@Style+".";
		set .@menu$, " ~ Next (^0055FF"+((.@Style!=.@Styles[.@s])?.@Style+1:1)+"^000000): ~ Previous (^0055FF"+((.@Style!=1)?.@Style-1:.@Styles[.@s])+"^000000): ~ Jump to...: ~ Revert to original (^0055FF"+.@Revert+"^000000)";
		switch(select(.@menu$)) {
		case 1:
			set .@Style, ((.@Style != .@Styles[.@s]) ? .@Style+1 : 1);
			break;
		case 2:
			set .@Style, ((.@Style != 1) ? .@Style-1 : .@Styles[.@s]);
			break;
		case 3:
			message strcharinfo(0),"Choose a style between 1 - "+.@Styles[.@s]+".";
			input .@Style,0,.@Styles[.@s];
			if (!.@Style)
				set .@Style, rand(1,.@Styles[.@s]);
			break;
		case 4:
			set .@Style, .@Revert;
			setlook .@Look[.@s], .@Revert;
			break;
		}
	}
return;

S_PlagiarizeSkill:
    set .@plagiarizePrice, 100000;
    set .@plagSkillLevelMax, 10;
    deletearray .@SkillID, getarraysize(.@SkillID);
    deletearray .@SkillLV, getarraysize(.@SkillLV);
    deletearray .@PlagSkillsID, getarraysize(.@PlagSkillsID);

    setarray .@SkillID[0],263,13, 7,14,19,20,21,83,84,85,86,89,90,91,421,534,536,537,540,542;
    setarray .@SkillLV[0], 10,10,10,10,10,10,10,10,10,10,10,10,10,5,   7, 10,  5, 10, 19,  5;
    setarray .@PlagSkillsID[0],263,5,7,13,14,19,20,42,47,62,77,79,83,84,85,89,90,229,250,251,253,254,528,535,537,540,421;
    /*
            "MO_TRIPLEATTACK",263,10
            "SM_BASH",5,10
            "SM_MAGNUM",7,10
            "MG_SOULSTRIKE",13,10
            "MG_COLDBOLT",14,10
            "MG_FIREBOLT",19,10
            "MG_LIGHTNINGBOLT",20,10
            "MC_MAMMONITE",42,10
            "AC_SHOWER",47,10
            "KN_BOWLINGBASH",62,10
            "PR_TURNUNDEAD",77,10
            "PR_MAGNUS",79,10            
            "WZ_METEOR",83,10
            "WZ_JUPITEL",84,10
            "WZ_VERMILION",85,10
            "WZ_STORMGUST",89,10
            "WZ_EARTHSPIKE",90,10
            "AM_DEMONSTRATION",229,10            
            "CR_SHIELDCHARGE",250,10
            "CR_SHIELDBOOMERANG",251,10
            "CR_HOLYCROSS",253,10
            "CR_GRANDCROSS",254,10
            "NJ_KASUMIKIRI",528,10
            "NJ_KAENSIN",535,10
            "NJ_HYOUSENSOU",537,10
            "NJ_HUUJIN",540,10
            "TK_JUMPKICK";421,7
    */
	if (!getskilllv("RG_PLAGIARISM")) {
		mes "You must have Plagiarism skill learned..";
		close;
	}
	mes "Do you want to copy a skill?";
    mes "My service costs ^FF0000"+ F_InsertComma(.@plagiarizePrice) +" Zeny^000000.";
	if (select(" ~ Proceed","Cancel") == 2) close;
	if (.@plagiarizePrice > 0 && Zeny < .@plagiarizePrice) {
		message(strcharinfo(0),"Not enough Zeny.");
		close;
	}
	.@menu$ = "";
	.@f = getarraysize(.@PlagSkillsID);
	for(.@i = 0; .@i < .@f; .@i++)
		.@menu$ += getskillname(.@PlagSkillsID[.@i])+(.@i==.@f?"":":");
	.@s = select(.@menu$) - 1;

	if (.@plagiarizePrice > 0)
		Zeny -= .@plagiarizePrice;
    plagiarizeskill .@PlagSkillsID[.@s],.@plagSkillLevelMax;
    
    mes "Here you go!";
return;

OnInit:
	// Initialisation, do not edit these
	.NPCName$ = "[Jira]";
	
	// Settings
	.ThirdClass = false;					// Enable third classes?
	.RebirthClass = true;				// Enable rebirth classes?
	.SecondExpanded = false;				// Enable new expanded second classes: Ex. Super Novice, Kagerou/Oboro, Rebellion?
	.BabyNovice = false;					// Enable Baby novice classes? Disable it if you like player must have parent to get job baby.
	.BabyClass = false;					// Enable Baby classes?
	.BabyThird = false;					// Enable Baby third classes?
	.BabyExpanded = false;				// Enable Baby Expanded classes: Ex. Baby Ninja, Baby Taekwon, etc.
	.BabySummoner = false;				// Enable Baby Summoner?
	.LastJob = true;					// Enforce linear class changes?
	.SkillPointCheck = true;			// Force player to use up all skill points?
	.Platinum = true;					// Get platinum skills automatically?
	.GetJobEquip = false;				// Get job equipment (mostly weapons) on job change?

	// Level Requirements
	setarray .Req_First[0],1,10; 		// Minimum base level, job level to turn into 1st class
	setarray .Req_Second[0],1,40; 		// Minimum base level, job level to turn into 2nd class
	setarray .Req_Rebirth[0],99,50;		// Minimum base level, job level to rebirth
	setarray .Req_Third[0],99,50;		// Minimum base level, job level to change to third class
	setarray .Req_Exp_NJ_GS[0],99,70; 	// Minimum base level, job level to turn into Expanded Ninja and Gunslinger
	setarray .Req_Exp_SNOVI[0],99,99; 	// Minimum base level, job level to turn into Expanded Super Novice
	setarray .Req_SHandler[0],200,60;	// Minimum base level, job level to turn into Spirit Handler
	.SNovice = 99;						// Minimum base level to turn into Super Novice
	
end;

}